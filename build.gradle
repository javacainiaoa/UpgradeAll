// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.8.22' // 确保使用兼容的 Kotlin 版本
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:8.0.2"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NO FREE
        if (!project.hasProperty('free')) {
            classpath 'com.google.gms:google-services:4.4.2'
            classpath 'com.google.firebase:firebase-crashlytics-gradle:3.0.3'
            classpath 'com.google.firebase:perf-plugin:1.4.2'
        }
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"
    id 'org.jetbrains.kotlin.android' version "$kotlin_version" apply false
    id 'com.google.devtools.ksp' version '2.0.21-1.0.28' apply false
}

import groovy.json.JsonSlurper
String findRustlsPlatformVerifierProject() {
    var PATH_TO_DEPENDENT_CRATE = "./core-getter/src/main/rust/api_proxy"
    def dependencyText = providers.exec {
        // print now working directory
        commandLine("cargo", "metadata", "--format-version", "1", "--manifest-path", "$PATH_TO_DEPENDENT_CRATE/Cargo.toml")
    }.standardOutput.asText.get()

    def dependencyJson = new JsonSlurper().parseText(dependencyText)
    def manifestPath = file(dependencyJson.packages.find { it.name == "rustls-platform-verifier-android" }.manifest_path)
    return new File(manifestPath.parentFile, "maven").path
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url "https://jitpack.io" }
        // For https://gitlab.com/AuroraOSS/gplayapi
        maven { url "https://gitlab.com/api/v4/projects/18497829/packages/maven"}
        // Getter Rust TLS
        // Due https://stackoverflow.com/questions/75904120/how-can-i-use-repositories-in-my-android-modules-build-gradle-not-in-top-level
        maven {
            url = findRustlsPlatformVerifierProject()
            metadataSources.artifact()
        }
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_19
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_19
    }
}

if (project.hasProperty('free')) {
    project.logger.lifecycle('build without no free lib')
}
